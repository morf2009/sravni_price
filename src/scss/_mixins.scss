//media
    @charset "UTF-8"; // Fixes an issue where Ruby locale is not set properly
    //https://github.com/sass-mq/sass-mq

    $mq-base-font-size: 16px !default;

    $mq-responsive: true !default;

    $mq-breakpoints: (
            "xsm":    374px,
            "xsmin":  574px,
            "xs":     575px,
            "sm":     767px,
            "md":     991px,
            "lg":     1199px,
            "lgmin":  1200px

    ) !default;

    $mq-static-breakpoint: desktop !default;

    $mq-show-breakpoints: () !default;

    $mq-media-type: all !default;

    @function mq-px2em($px, $base-font-size: $mq-base-font-size) {
      @if unitless($px) {
        @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
        @return mq-px2em($px * 1px, $base-font-size);
      } @else if unit($px) == em {
        @return $px;
      }
      @return ($px / $base-font-size) * 1em;
    }

    @function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {
      @if map-has-key($breakpoints, $name) {
        @return map-get($breakpoints, $name);
      } @else {
        @warn "Breakpoint #{$name} wasn't found in $breakpoints.";
      }
    }

    @mixin mq(
      $from: false,
      $until: false,
      $and: false,
      $media-type: $mq-media-type,
      $breakpoints: $mq-breakpoints,
      $responsive: $mq-responsive,
      $static-breakpoint: $mq-static-breakpoint
    ) {
      $min-width: 0;
      $max-width: 0;
      $media-query: '';

      // From: this breakpoint (inclusive)
      @if $from {
        @if type-of($from) == number {
          $min-width: mq-px2em($from);
        } @else {
          $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));
        }
      }

      // Until: that breakpoint (exclusive)
      @if $until {
        @if type-of($until) == number {
          $max-width: mq-px2em($until);
        } @else {
          $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;
        }
      }

      // Responsive support is disabled, rasterize the output outside @media blocks
      // The browser will rely on the cascade itself.
      @if $responsive == false {
        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);
        $target-width: mq-px2em($static-breakpoint-width);

        // Output only rules that start at or span our target width
        @if (
                $and == false
                and $min-width <= $target-width
                and (
                    $until == false or $max-width >= $target-width
                )
                and $media-type != 'print'
        ) {
          @content;
        }
      }

        // Responsive support is enabled, output rules inside @media queries
      @else {
        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }
        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }
        @if $and            { $media-query: '#{$media-query} and #{$and}'; }

        // Remove unnecessary media query prefix 'all and '
        @if ($media-type == 'all' and $media-query != '') {
          $media-type: '';
          $media-query: str-slice(unquote($media-query), 6);
        }

        @media #{$media-type + $media-query} {
          @content;
        }
      }
    }

    @function _mq-quick-sort($list) {
      $less:  ();
      $equal: ();
      $large: ();

      @if length($list) > 1 {
        $seed: nth($list, ceil(length($list) / 2));

        @each $item in $list {
          @if ($item == $seed) {
            $equal: append($equal, $item);
          } @else if ($item < $seed) {
            $less: append($less, $item);
          } @else if ($item > $seed) {
            $large: append($large, $item);
          }
        }

        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));
      }

      @return $list;
    }

    @function _mq-map-sort-by-value($map) {
      $map-sorted: ();
      $map-keys: map-keys($map);
      $map-values: map-values($map);
      $map-values-sorted: _mq-quick-sort($map-values);

      // Reorder key/value pairs based on key values
      @each $value in $map-values-sorted {
        $index: index($map-values, $value);
        $key: nth($map-keys, $index);
        $map-sorted: map-merge($map-sorted, ($key: $value));

        // Unset the value in $map-values to prevent the loop
        // from finding the same index twice
        $map-values: set-nth($map-values, $index, 0);
      }

      @return $map-sorted;
    }

    @mixin mq-add-breakpoint($name, $width) {
      $new-breakpoint: ($name: $width);
      $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;
      $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;
    }

    @mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {
      body:before {
        background-color: #FCF8E3;
        border-bottom: 1px solid #FBEED5;
        border-left: 1px solid #FBEED5;
        color: #C09853;
        font: small-caption;
        padding: 3px 6px;
        pointer-events: none;
        position: fixed;
        right: 0;
        top: 0;
        z-index: 100;

        // Loop through the breakpoints that should be shown
        @each $show-breakpoint in $show-breakpoints {
          $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);
          @include mq($show-breakpoint, $breakpoints: $breakpoints) {
            content: "#{$show-breakpoint} â‰¥ #{$width} (#{mq-px2em($width)})";
          }
        }
      }
    }

    @if length($mq-show-breakpoints) > 0 {
      @include mq-show-breakpoints;
    }
    //body {
    //  @include mq($from: xsm, $until: xs) {
    //    background: red;
    //  }
    //}

// Hide only visually, but have it available for screenreaders
    @mixin vh() {
      border: 0;
      clip: rect(0 0 0 0);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px;
    }
    //@include vh()

//Retina images
  @mixin retina {
    @media only screen and (-webkit-min-device-pixel-ratio: 1.5),
    only screen and (-moz-min-device-pixel-ratio: 1.5),
    only screen and (-o-min-device-pixel-ratio: 3 / 2),
    only screen and (min-device-pixel-ratio: 1.5),
    only screen and (min-resolution: 1.5dppx) {
      @content;
    }
  }
  //.element {
  //  @include retina {
  //    background-image: url(../img/background@2x.png);
  //  }
  //}